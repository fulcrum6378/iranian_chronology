package ir.mahdiparastesh.chrono.iranian.first;

import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.LocalDate;
import java.time.Period;
import java.time.chrono.AbstractChronology;
import java.time.chrono.Era;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.ValueRange;

public class IranianChronology extends AbstractChronology implements Serializable {

    public static final IranianChronology INSTANCE = new IranianChronology();

    private IranianChronology() {
    }

    //-----------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public String getId() {
        return "Iranian";
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String getCalendarType() {
        return "iranian";
    }

    //-----------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public IranianDate date(Era era, int yearOfEra, int month, int dayOfMonth) {
        return date(prolepticYear(era, yearOfEra), month, dayOfMonth);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IranianDate date(int prolepticYear, int month, int dayOfMonth) {
        return IranianDate.of(prolepticYear, month, dayOfMonth);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IranianDate dateYearDay(Era era, int yearOfEra, int dayOfYear) {
        return dateYearDay(prolepticYear(era, yearOfEra), dayOfYear);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IranianDate dateYearDay(int prolepticYear, int dayOfYear) {
        return IranianDate.ofYearDay(prolepticYear, dayOfYear);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IranianDate dateEpochDay(long epochDay) {
        return IranianDate.ofEpochDay(epochDay);
    }

    //-----------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDate date(TemporalAccessor temporal) {
        return LocalDate.from(temporal);
    }

    //-----------------------------------------------------------------------

    // .....

    //-----------------------------------------------------------------------

    /*
     * {@inheritDoc}
     */
    @Override
    public ValueRange range(ChronoField field) {
        return field.range();
    }

    //-----------------------------------------------------------------------

    /*
     * {@inheritDoc}
     */
    @Override
    public Period period(int years, int months, int days) {
        return Period.of(years, months, days);
    }

    //-----------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean isIsoBased() {
        return true;
    }

    //-----------------------------------------------------------------------

    /*
     * {@inheritDoc}
     */
    /*@Override
    @java.io.Serial
    Object writeReplace() {
        return super.writeReplace();
    }*/

    /**
     * {@inheritDoc}
     */
    @java.io.Serial
    private void readObject(ObjectInputStream s) throws InvalidObjectException {
        throw new InvalidObjectException("Deserialization via serialization delegate");
    }
}
